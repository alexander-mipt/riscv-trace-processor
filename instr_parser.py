#!/usr/bin/env python3

import yaml
import pprint
import sys
import os

comment_string = "/*\n" \
                 " * This file is autogenerated by 'cmdgen.py' script from .yaml file\n" \
                 " * Do not try to change anything in this file\n" \
                 " * If you need to change code - change script/markdown file\n" \
                 " ***********************************************************\n" \
                 " * Written by Derzhavin Andrey (derzhavin3016) && Khaydari Farid (Tako-San) && Antipov Alexander\n" \
                 " */\n\n"

includes_string = "/*\n" \
                 " * #include\n" \
                 " */\n\n"

return_type = "void"
context_type = "Context"
ir_type = "Instr"


def parse(fin_name):
    # parsing from file function
    with open(fin_name, 'r') as fin:
        return yaml.safe_load(fin)

def hashtable_hpp(commands):
    with open('cmd_hashtable.hpp', 'w') as fout:
        fout.write(comment_string)
        fout.write(f"std::unordered_map<const std::string, {return_type}(*)({context_type}, {ir_type})> Cmds\n{{\n")

        last = commands[-1]
        for cmd in commands:
            instr = cmd['mnemonic'].upper().replace('.', '_')
            fout.write(f"    {{\"{instr}\", do_{instr}}}{',' if cmd is not last else ''}\n")

        fout.write('};')

def cmd_cpp(commands):
    with open('cmd.cpp', 'w') as fout:
        fout.write(comment_string)

        for cmd in commands:
            instr = cmd['mnemonic'].upper().replace('.', '_')
            fout.write(f'{return_type} do_{instr}({context_type}, {ir_type})\n')
            fout.write(
                '{\n'
                f'    common_routine({context_type}, {ir_type});\n'
                '     std::cerr << __func__ << " NOT IMPLEMENTED YET" << std:: endl;\n'
                '}\n\n'
            )

def main():
    
    yaml_in = 'risc-v.yaml'  # input()
    yaml_out = 'decode.cpp'  # input()
    yaml_dict = parse(yaml_in)

    for i in yaml_dict['instructions']:
        print(i['mnemonic'], i['fields'])
    
    hashtable_hpp(yaml_dict['instructions'])
    cmd_cpp(yaml_dict['instructions'])

if __name__ == '__main__':
    main()


