/*
 * This file is autogenerated by 'cmdgen.py' script from .yaml file
 * Do not try to change anything in this file
 * If you need to change code - change script/markdown file
 ***********************************************************
 * Written by Derzhavin Andrey (derzhavin3016) && Khaydari Farid (Tako-San) && Antipov Alexander
 */

#pragma once
#include <cstdio>
#include <unordered_map>

#include "parse_types.hpp"

void do_BEQ(Context&, Instr&);
void do_BNE(Context&, Instr&);
void do_BLT(Context&, Instr&);
void do_BGE(Context&, Instr&);
void do_BLTU(Context&, Instr&);
void do_BGEU(Context&, Instr&);
void do_JALR(Context&, Instr&);
void do_JAL(Context&, Instr&);
void do_LUI(Context&, Instr&);
void do_AUIPC(Context&, Instr&);
void do_ADDI(Context&, Instr&);
void do_SLLI(Context&, Instr&);
void do_SLTI(Context&, Instr&);
void do_SLTIU(Context&, Instr&);
void do_XORI(Context&, Instr&);
void do_SRLI(Context&, Instr&);
void do_SRAI(Context&, Instr&);
void do_ORI(Context&, Instr&);
void do_ANDI(Context&, Instr&);
void do_ADD(Context&, Instr&);
void do_SUB(Context&, Instr&);
void do_SLL(Context&, Instr&);
void do_SLT(Context&, Instr&);
void do_SLTU(Context&, Instr&);
void do_XOR(Context&, Instr&);
void do_SRL(Context&, Instr&);
void do_SRA(Context&, Instr&);
void do_OR(Context&, Instr&);
void do_AND(Context&, Instr&);
void do_ADDIW(Context&, Instr&);
void do_SLLIW(Context&, Instr&);
void do_SRLIW(Context&, Instr&);
void do_SRAIW(Context&, Instr&);
void do_ADDW(Context&, Instr&);
void do_SUBW(Context&, Instr&);
void do_SLLW(Context&, Instr&);
void do_SRLW(Context&, Instr&);
void do_SRAW(Context&, Instr&);
void do_LB(Context&, Instr&);
void do_LH(Context&, Instr&);
void do_LW(Context&, Instr&);
void do_LD(Context&, Instr&);
void do_LBU(Context&, Instr&);
void do_LHU(Context&, Instr&);
void do_LWU(Context&, Instr&);
void do_SB(Context&, Instr&);
void do_SH(Context&, Instr&);
void do_SW(Context&, Instr&);
void do_SD(Context&, Instr&);
void do_FENCE(Context&, Instr&);
void do_FENCE_I(Context&, Instr&);
void do_MUL(Context&, Instr&);
void do_MULH(Context&, Instr&);
void do_MULHSU(Context&, Instr&);
void do_MULHU(Context&, Instr&);
void do_DIV(Context&, Instr&);
void do_DIVU(Context&, Instr&);
void do_REM(Context&, Instr&);
void do_REMU(Context&, Instr&);
void do_MULW(Context&, Instr&);
void do_DIVW(Context&, Instr&);
void do_DIVUW(Context&, Instr&);
void do_REMW(Context&, Instr&);
void do_REMUW(Context&, Instr&);
void do_AMOADD_W(Context&, Instr&);
void do_AMOXOR_W(Context&, Instr&);
void do_AMOOR_W(Context&, Instr&);
void do_AMOAND_W(Context&, Instr&);
void do_AMOMIN_W(Context&, Instr&);
void do_AMOMAX_W(Context&, Instr&);
void do_AMOMINU_W(Context&, Instr&);
void do_AMOMAXU_W(Context&, Instr&);
void do_AMOSWAP_W(Context&, Instr&);
void do_LR_W(Context&, Instr&);
void do_SC_W(Context&, Instr&);
void do_AMOADD_D(Context&, Instr&);
void do_AMOXOR_D(Context&, Instr&);
void do_AMOOR_D(Context&, Instr&);
void do_AMOAND_D(Context&, Instr&);
void do_AMOMIN_D(Context&, Instr&);
void do_AMOMAX_D(Context&, Instr&);
void do_AMOMINU_D(Context&, Instr&);
void do_AMOMAXU_D(Context&, Instr&);
void do_AMOSWAP_D(Context&, Instr&);
void do_LR_D(Context&, Instr&);
void do_SC_D(Context&, Instr&);
void do_ECALL(Context&, Instr&);
void do_EBREAK(Context&, Instr&);
void do_URET(Context&, Instr&);
void do_SRET(Context&, Instr&);
void do_MRET(Context&, Instr&);
void do_DRET(Context&, Instr&);
void do_SFENCE_VMA(Context&, Instr&);
void do_WFI(Context&, Instr&);
void do_CSRRW(Context&, Instr&);
void do_CSRRS(Context&, Instr&);
void do_CSRRC(Context&, Instr&);
void do_CSRRWI(Context&, Instr&);
void do_CSRRSI(Context&, Instr&);
void do_CSRRCI(Context&, Instr&);
void do_HFENCE_VVMA(Context&, Instr&);
void do_HFENCE_GVMA(Context&, Instr&);
void do_FADD_S(Context&, Instr&);
void do_FSUB_S(Context&, Instr&);
void do_FMUL_S(Context&, Instr&);
void do_FDIV_S(Context&, Instr&);
void do_FSGNJ_S(Context&, Instr&);
void do_FSGNJN_S(Context&, Instr&);
void do_FSGNJX_S(Context&, Instr&);
void do_FMIN_S(Context&, Instr&);
void do_FMAX_S(Context&, Instr&);
void do_FSQRT_S(Context&, Instr&);
void do_FADD_D(Context&, Instr&);
void do_FSUB_D(Context&, Instr&);
void do_FMUL_D(Context&, Instr&);
void do_FDIV_D(Context&, Instr&);
void do_FSGNJ_D(Context&, Instr&);
void do_FSGNJN_D(Context&, Instr&);
void do_FSGNJX_D(Context&, Instr&);
void do_FMIN_D(Context&, Instr&);
void do_FMAX_D(Context&, Instr&);
void do_FCVT_S_D(Context&, Instr&);
void do_FCVT_D_S(Context&, Instr&);
void do_FSQRT_D(Context&, Instr&);
void do_FADD_Q(Context&, Instr&);
void do_FSUB_Q(Context&, Instr&);
void do_FMUL_Q(Context&, Instr&);
void do_FDIV_Q(Context&, Instr&);
void do_FSGNJ_Q(Context&, Instr&);
void do_FSGNJN_Q(Context&, Instr&);
void do_FSGNJX_Q(Context&, Instr&);
void do_FMIN_Q(Context&, Instr&);
void do_FMAX_Q(Context&, Instr&);
void do_FCVT_S_Q(Context&, Instr&);
void do_FCVT_Q_S(Context&, Instr&);
void do_FCVT_D_Q(Context&, Instr&);
void do_FCVT_Q_D(Context&, Instr&);
void do_FSQRT_Q(Context&, Instr&);
void do_FLE_S(Context&, Instr&);
void do_FLT_S(Context&, Instr&);
void do_FEQ_S(Context&, Instr&);
void do_FLE_D(Context&, Instr&);
void do_FLT_D(Context&, Instr&);
void do_FEQ_D(Context&, Instr&);
void do_FLE_Q(Context&, Instr&);
void do_FLT_Q(Context&, Instr&);
void do_FEQ_Q(Context&, Instr&);
void do_FCVT_W_S(Context&, Instr&);
void do_FCVT_WU_S(Context&, Instr&);
void do_FCVT_L_S(Context&, Instr&);
void do_FCVT_LU_S(Context&, Instr&);
void do_FMV_X_W(Context&, Instr&);
void do_FCLASS_S(Context&, Instr&);
void do_FCVT_W_D(Context&, Instr&);
void do_FCVT_WU_D(Context&, Instr&);
void do_FCVT_L_D(Context&, Instr&);
void do_FCVT_LU_D(Context&, Instr&);
void do_FMV_X_D(Context&, Instr&);
void do_FCLASS_D(Context&, Instr&);
void do_FCVT_W_Q(Context&, Instr&);
void do_FCVT_WU_Q(Context&, Instr&);
void do_FCVT_L_Q(Context&, Instr&);
void do_FCVT_LU_Q(Context&, Instr&);
void do_FMV_X_Q(Context&, Instr&);
void do_FCLASS_Q(Context&, Instr&);
void do_FCVT_S_W(Context&, Instr&);
void do_FCVT_S_WU(Context&, Instr&);
void do_FCVT_S_L(Context&, Instr&);
void do_FCVT_S_LU(Context&, Instr&);
void do_FMV_W_X(Context&, Instr&);
void do_FCVT_D_W(Context&, Instr&);
void do_FCVT_D_WU(Context&, Instr&);
void do_FCVT_D_L(Context&, Instr&);
void do_FCVT_D_LU(Context&, Instr&);
void do_FMV_D_X(Context&, Instr&);
void do_FCVT_Q_W(Context&, Instr&);
void do_FCVT_Q_WU(Context&, Instr&);
void do_FCVT_Q_L(Context&, Instr&);
void do_FCVT_Q_LU(Context&, Instr&);
void do_FMV_Q_X(Context&, Instr&);
void do_FLW(Context&, Instr&);
void do_FLD(Context&, Instr&);
void do_FLQ(Context&, Instr&);
void do_FSW(Context&, Instr&);
void do_FSD(Context&, Instr&);
void do_FSQ(Context&, Instr&);
void do_FMADD_S(Context&, Instr&);
void do_FMSUB_S(Context&, Instr&);
void do_FNMSUB_S(Context&, Instr&);
void do_FNMADD_S(Context&, Instr&);
void do_FMADD_D(Context&, Instr&);
void do_FMSUB_D(Context&, Instr&);
void do_FNMSUB_D(Context&, Instr&);
void do_FNMADD_D(Context&, Instr&);
void do_FMADD_Q(Context&, Instr&);
void do_FMSUB_Q(Context&, Instr&);
void do_FNMSUB_Q(Context&, Instr&);
void do_FNMADD_Q(Context&, Instr&);


static std::unordered_map<std::string, Opcode> OpcdHash = \
{
    {"beq", Opcode::BEQ},
    {"bne", Opcode::BNE},
    {"blt", Opcode::BLT},
    {"bge", Opcode::BGE},
    {"bltu", Opcode::BLTU},
    {"bgeu", Opcode::BGEU},
    {"jalr", Opcode::JALR},
    {"jal", Opcode::JAL},
    {"lui", Opcode::LUI},
    {"auipc", Opcode::AUIPC},
    {"addi", Opcode::ADDI},
    {"slli", Opcode::SLLI},
    {"slti", Opcode::SLTI},
    {"sltiu", Opcode::SLTIU},
    {"xori", Opcode::XORI},
    {"srli", Opcode::SRLI},
    {"srai", Opcode::SRAI},
    {"ori", Opcode::ORI},
    {"andi", Opcode::ANDI},
    {"add", Opcode::ADD},
    {"sub", Opcode::SUB},
    {"sll", Opcode::SLL},
    {"slt", Opcode::SLT},
    {"sltu", Opcode::SLTU},
    {"xor", Opcode::XOR},
    {"srl", Opcode::SRL},
    {"sra", Opcode::SRA},
    {"or", Opcode::OR},
    {"and", Opcode::AND},
    {"addiw", Opcode::ADDIW},
    {"slliw", Opcode::SLLIW},
    {"srliw", Opcode::SRLIW},
    {"sraiw", Opcode::SRAIW},
    {"addw", Opcode::ADDW},
    {"subw", Opcode::SUBW},
    {"sllw", Opcode::SLLW},
    {"srlw", Opcode::SRLW},
    {"sraw", Opcode::SRAW},
    {"lb", Opcode::LB},
    {"lh", Opcode::LH},
    {"lw", Opcode::LW},
    {"ld", Opcode::LD},
    {"lbu", Opcode::LBU},
    {"lhu", Opcode::LHU},
    {"lwu", Opcode::LWU},
    {"sb", Opcode::SB},
    {"sh", Opcode::SH},
    {"sw", Opcode::SW},
    {"sd", Opcode::SD},
    {"fence", Opcode::FENCE},
    {"fence.i", Opcode::FENCE_I},
    {"mul", Opcode::MUL},
    {"mulh", Opcode::MULH},
    {"mulhsu", Opcode::MULHSU},
    {"mulhu", Opcode::MULHU},
    {"div", Opcode::DIV},
    {"divu", Opcode::DIVU},
    {"rem", Opcode::REM},
    {"remu", Opcode::REMU},
    {"mulw", Opcode::MULW},
    {"divw", Opcode::DIVW},
    {"divuw", Opcode::DIVUW},
    {"remw", Opcode::REMW},
    {"remuw", Opcode::REMUW},
    {"amoadd.w", Opcode::AMOADD_W},
    {"amoxor.w", Opcode::AMOXOR_W},
    {"amoor.w", Opcode::AMOOR_W},
    {"amoand.w", Opcode::AMOAND_W},
    {"amomin.w", Opcode::AMOMIN_W},
    {"amomax.w", Opcode::AMOMAX_W},
    {"amominu.w", Opcode::AMOMINU_W},
    {"amomaxu.w", Opcode::AMOMAXU_W},
    {"amoswap.w", Opcode::AMOSWAP_W},
    {"lr.w", Opcode::LR_W},
    {"sc.w", Opcode::SC_W},
    {"amoadd.d", Opcode::AMOADD_D},
    {"amoxor.d", Opcode::AMOXOR_D},
    {"amoor.d", Opcode::AMOOR_D},
    {"amoand.d", Opcode::AMOAND_D},
    {"amomin.d", Opcode::AMOMIN_D},
    {"amomax.d", Opcode::AMOMAX_D},
    {"amominu.d", Opcode::AMOMINU_D},
    {"amomaxu.d", Opcode::AMOMAXU_D},
    {"amoswap.d", Opcode::AMOSWAP_D},
    {"lr.d", Opcode::LR_D},
    {"sc.d", Opcode::SC_D},
    {"ecall", Opcode::ECALL},
    {"ebreak", Opcode::EBREAK},
    {"uret", Opcode::URET},
    {"sret", Opcode::SRET},
    {"mret", Opcode::MRET},
    {"dret", Opcode::DRET},
    {"sfence.vma", Opcode::SFENCE_VMA},
    {"wfi", Opcode::WFI},
    {"csrrw", Opcode::CSRRW},
    {"csrrs", Opcode::CSRRS},
    {"csrrc", Opcode::CSRRC},
    {"csrrwi", Opcode::CSRRWI},
    {"csrrsi", Opcode::CSRRSI},
    {"csrrci", Opcode::CSRRCI},
    {"hfence.vvma", Opcode::HFENCE_VVMA},
    {"hfence.gvma", Opcode::HFENCE_GVMA},
    {"fadd.s", Opcode::FADD_S},
    {"fsub.s", Opcode::FSUB_S},
    {"fmul.s", Opcode::FMUL_S},
    {"fdiv.s", Opcode::FDIV_S},
    {"fsgnj.s", Opcode::FSGNJ_S},
    {"fsgnjn.s", Opcode::FSGNJN_S},
    {"fsgnjx.s", Opcode::FSGNJX_S},
    {"fmin.s", Opcode::FMIN_S},
    {"fmax.s", Opcode::FMAX_S},
    {"fsqrt.s", Opcode::FSQRT_S},
    {"fadd.d", Opcode::FADD_D},
    {"fsub.d", Opcode::FSUB_D},
    {"fmul.d", Opcode::FMUL_D},
    {"fdiv.d", Opcode::FDIV_D},
    {"fsgnj.d", Opcode::FSGNJ_D},
    {"fsgnjn.d", Opcode::FSGNJN_D},
    {"fsgnjx.d", Opcode::FSGNJX_D},
    {"fmin.d", Opcode::FMIN_D},
    {"fmax.d", Opcode::FMAX_D},
    {"fcvt.s.d", Opcode::FCVT_S_D},
    {"fcvt.d.s", Opcode::FCVT_D_S},
    {"fsqrt.d", Opcode::FSQRT_D},
    {"fadd.q", Opcode::FADD_Q},
    {"fsub.q", Opcode::FSUB_Q},
    {"fmul.q", Opcode::FMUL_Q},
    {"fdiv.q", Opcode::FDIV_Q},
    {"fsgnj.q", Opcode::FSGNJ_Q},
    {"fsgnjn.q", Opcode::FSGNJN_Q},
    {"fsgnjx.q", Opcode::FSGNJX_Q},
    {"fmin.q", Opcode::FMIN_Q},
    {"fmax.q", Opcode::FMAX_Q},
    {"fcvt.s.q", Opcode::FCVT_S_Q},
    {"fcvt.q.s", Opcode::FCVT_Q_S},
    {"fcvt.d.q", Opcode::FCVT_D_Q},
    {"fcvt.q.d", Opcode::FCVT_Q_D},
    {"fsqrt.q", Opcode::FSQRT_Q},
    {"fle.s", Opcode::FLE_S},
    {"flt.s", Opcode::FLT_S},
    {"feq.s", Opcode::FEQ_S},
    {"fle.d", Opcode::FLE_D},
    {"flt.d", Opcode::FLT_D},
    {"feq.d", Opcode::FEQ_D},
    {"fle.q", Opcode::FLE_Q},
    {"flt.q", Opcode::FLT_Q},
    {"feq.q", Opcode::FEQ_Q},
    {"fcvt.w.s", Opcode::FCVT_W_S},
    {"fcvt.wu.s", Opcode::FCVT_WU_S},
    {"fcvt.l.s", Opcode::FCVT_L_S},
    {"fcvt.lu.s", Opcode::FCVT_LU_S},
    {"fmv.x.w", Opcode::FMV_X_W},
    {"fclass.s", Opcode::FCLASS_S},
    {"fcvt.w.d", Opcode::FCVT_W_D},
    {"fcvt.wu.d", Opcode::FCVT_WU_D},
    {"fcvt.l.d", Opcode::FCVT_L_D},
    {"fcvt.lu.d", Opcode::FCVT_LU_D},
    {"fmv.x.d", Opcode::FMV_X_D},
    {"fclass.d", Opcode::FCLASS_D},
    {"fcvt.w.q", Opcode::FCVT_W_Q},
    {"fcvt.wu.q", Opcode::FCVT_WU_Q},
    {"fcvt.l.q", Opcode::FCVT_L_Q},
    {"fcvt.lu.q", Opcode::FCVT_LU_Q},
    {"fmv.x.q", Opcode::FMV_X_Q},
    {"fclass.q", Opcode::FCLASS_Q},
    {"fcvt.s.w", Opcode::FCVT_S_W},
    {"fcvt.s.wu", Opcode::FCVT_S_WU},
    {"fcvt.s.l", Opcode::FCVT_S_L},
    {"fcvt.s.lu", Opcode::FCVT_S_LU},
    {"fmv.w.x", Opcode::FMV_W_X},
    {"fcvt.d.w", Opcode::FCVT_D_W},
    {"fcvt.d.wu", Opcode::FCVT_D_WU},
    {"fcvt.d.l", Opcode::FCVT_D_L},
    {"fcvt.d.lu", Opcode::FCVT_D_LU},
    {"fmv.d.x", Opcode::FMV_D_X},
    {"fcvt.q.w", Opcode::FCVT_Q_W},
    {"fcvt.q.wu", Opcode::FCVT_Q_WU},
    {"fcvt.q.l", Opcode::FCVT_Q_L},
    {"fcvt.q.lu", Opcode::FCVT_Q_LU},
    {"fmv.q.x", Opcode::FMV_Q_X},
    {"flw", Opcode::FLW},
    {"fld", Opcode::FLD},
    {"flq", Opcode::FLQ},
    {"fsw", Opcode::FSW},
    {"fsd", Opcode::FSD},
    {"fsq", Opcode::FSQ},
    {"fmadd.s", Opcode::FMADD_S},
    {"fmsub.s", Opcode::FMSUB_S},
    {"fnmsub.s", Opcode::FNMSUB_S},
    {"fnmadd.s", Opcode::FNMADD_S},
    {"fmadd.d", Opcode::FMADD_D},
    {"fmsub.d", Opcode::FMSUB_D},
    {"fnmsub.d", Opcode::FNMSUB_D},
    {"fnmadd.d", Opcode::FNMADD_D},
    {"fmadd.q", Opcode::FMADD_Q},
    {"fmsub.q", Opcode::FMSUB_Q},
    {"fnmsub.q", Opcode::FNMSUB_Q},
    {"fnmadd.q", Opcode::FNMADD_Q}
};

static std::unordered_map<Opcode, void(*)(Context&, Instr&)> Cmds = \
{
    {Opcode::BEQ, do_BEQ},
    {Opcode::BNE, do_BNE},
    {Opcode::BLT, do_BLT},
    {Opcode::BGE, do_BGE},
    {Opcode::BLTU, do_BLTU},
    {Opcode::BGEU, do_BGEU},
    {Opcode::JALR, do_JALR},
    {Opcode::JAL, do_JAL},
    {Opcode::LUI, do_LUI},
    {Opcode::AUIPC, do_AUIPC},
    {Opcode::ADDI, do_ADDI},
    {Opcode::SLLI, do_SLLI},
    {Opcode::SLTI, do_SLTI},
    {Opcode::SLTIU, do_SLTIU},
    {Opcode::XORI, do_XORI},
    {Opcode::SRLI, do_SRLI},
    {Opcode::SRAI, do_SRAI},
    {Opcode::ORI, do_ORI},
    {Opcode::ANDI, do_ANDI},
    {Opcode::ADD, do_ADD},
    {Opcode::SUB, do_SUB},
    {Opcode::SLL, do_SLL},
    {Opcode::SLT, do_SLT},
    {Opcode::SLTU, do_SLTU},
    {Opcode::XOR, do_XOR},
    {Opcode::SRL, do_SRL},
    {Opcode::SRA, do_SRA},
    {Opcode::OR, do_OR},
    {Opcode::AND, do_AND},
    {Opcode::ADDIW, do_ADDIW},
    {Opcode::SLLIW, do_SLLIW},
    {Opcode::SRLIW, do_SRLIW},
    {Opcode::SRAIW, do_SRAIW},
    {Opcode::ADDW, do_ADDW},
    {Opcode::SUBW, do_SUBW},
    {Opcode::SLLW, do_SLLW},
    {Opcode::SRLW, do_SRLW},
    {Opcode::SRAW, do_SRAW},
    {Opcode::LB, do_LB},
    {Opcode::LH, do_LH},
    {Opcode::LW, do_LW},
    {Opcode::LD, do_LD},
    {Opcode::LBU, do_LBU},
    {Opcode::LHU, do_LHU},
    {Opcode::LWU, do_LWU},
    {Opcode::SB, do_SB},
    {Opcode::SH, do_SH},
    {Opcode::SW, do_SW},
    {Opcode::SD, do_SD},
    {Opcode::FENCE, do_FENCE},
    {Opcode::FENCE_I, do_FENCE_I},
    {Opcode::MUL, do_MUL},
    {Opcode::MULH, do_MULH},
    {Opcode::MULHSU, do_MULHSU},
    {Opcode::MULHU, do_MULHU},
    {Opcode::DIV, do_DIV},
    {Opcode::DIVU, do_DIVU},
    {Opcode::REM, do_REM},
    {Opcode::REMU, do_REMU},
    {Opcode::MULW, do_MULW},
    {Opcode::DIVW, do_DIVW},
    {Opcode::DIVUW, do_DIVUW},
    {Opcode::REMW, do_REMW},
    {Opcode::REMUW, do_REMUW},
    {Opcode::AMOADD_W, do_AMOADD_W},
    {Opcode::AMOXOR_W, do_AMOXOR_W},
    {Opcode::AMOOR_W, do_AMOOR_W},
    {Opcode::AMOAND_W, do_AMOAND_W},
    {Opcode::AMOMIN_W, do_AMOMIN_W},
    {Opcode::AMOMAX_W, do_AMOMAX_W},
    {Opcode::AMOMINU_W, do_AMOMINU_W},
    {Opcode::AMOMAXU_W, do_AMOMAXU_W},
    {Opcode::AMOSWAP_W, do_AMOSWAP_W},
    {Opcode::LR_W, do_LR_W},
    {Opcode::SC_W, do_SC_W},
    {Opcode::AMOADD_D, do_AMOADD_D},
    {Opcode::AMOXOR_D, do_AMOXOR_D},
    {Opcode::AMOOR_D, do_AMOOR_D},
    {Opcode::AMOAND_D, do_AMOAND_D},
    {Opcode::AMOMIN_D, do_AMOMIN_D},
    {Opcode::AMOMAX_D, do_AMOMAX_D},
    {Opcode::AMOMINU_D, do_AMOMINU_D},
    {Opcode::AMOMAXU_D, do_AMOMAXU_D},
    {Opcode::AMOSWAP_D, do_AMOSWAP_D},
    {Opcode::LR_D, do_LR_D},
    {Opcode::SC_D, do_SC_D},
    {Opcode::ECALL, do_ECALL},
    {Opcode::EBREAK, do_EBREAK},
    {Opcode::URET, do_URET},
    {Opcode::SRET, do_SRET},
    {Opcode::MRET, do_MRET},
    {Opcode::DRET, do_DRET},
    {Opcode::SFENCE_VMA, do_SFENCE_VMA},
    {Opcode::WFI, do_WFI},
    {Opcode::CSRRW, do_CSRRW},
    {Opcode::CSRRS, do_CSRRS},
    {Opcode::CSRRC, do_CSRRC},
    {Opcode::CSRRWI, do_CSRRWI},
    {Opcode::CSRRSI, do_CSRRSI},
    {Opcode::CSRRCI, do_CSRRCI},
    {Opcode::HFENCE_VVMA, do_HFENCE_VVMA},
    {Opcode::HFENCE_GVMA, do_HFENCE_GVMA},
    {Opcode::FADD_S, do_FADD_S},
    {Opcode::FSUB_S, do_FSUB_S},
    {Opcode::FMUL_S, do_FMUL_S},
    {Opcode::FDIV_S, do_FDIV_S},
    {Opcode::FSGNJ_S, do_FSGNJ_S},
    {Opcode::FSGNJN_S, do_FSGNJN_S},
    {Opcode::FSGNJX_S, do_FSGNJX_S},
    {Opcode::FMIN_S, do_FMIN_S},
    {Opcode::FMAX_S, do_FMAX_S},
    {Opcode::FSQRT_S, do_FSQRT_S},
    {Opcode::FADD_D, do_FADD_D},
    {Opcode::FSUB_D, do_FSUB_D},
    {Opcode::FMUL_D, do_FMUL_D},
    {Opcode::FDIV_D, do_FDIV_D},
    {Opcode::FSGNJ_D, do_FSGNJ_D},
    {Opcode::FSGNJN_D, do_FSGNJN_D},
    {Opcode::FSGNJX_D, do_FSGNJX_D},
    {Opcode::FMIN_D, do_FMIN_D},
    {Opcode::FMAX_D, do_FMAX_D},
    {Opcode::FCVT_S_D, do_FCVT_S_D},
    {Opcode::FCVT_D_S, do_FCVT_D_S},
    {Opcode::FSQRT_D, do_FSQRT_D},
    {Opcode::FADD_Q, do_FADD_Q},
    {Opcode::FSUB_Q, do_FSUB_Q},
    {Opcode::FMUL_Q, do_FMUL_Q},
    {Opcode::FDIV_Q, do_FDIV_Q},
    {Opcode::FSGNJ_Q, do_FSGNJ_Q},
    {Opcode::FSGNJN_Q, do_FSGNJN_Q},
    {Opcode::FSGNJX_Q, do_FSGNJX_Q},
    {Opcode::FMIN_Q, do_FMIN_Q},
    {Opcode::FMAX_Q, do_FMAX_Q},
    {Opcode::FCVT_S_Q, do_FCVT_S_Q},
    {Opcode::FCVT_Q_S, do_FCVT_Q_S},
    {Opcode::FCVT_D_Q, do_FCVT_D_Q},
    {Opcode::FCVT_Q_D, do_FCVT_Q_D},
    {Opcode::FSQRT_Q, do_FSQRT_Q},
    {Opcode::FLE_S, do_FLE_S},
    {Opcode::FLT_S, do_FLT_S},
    {Opcode::FEQ_S, do_FEQ_S},
    {Opcode::FLE_D, do_FLE_D},
    {Opcode::FLT_D, do_FLT_D},
    {Opcode::FEQ_D, do_FEQ_D},
    {Opcode::FLE_Q, do_FLE_Q},
    {Opcode::FLT_Q, do_FLT_Q},
    {Opcode::FEQ_Q, do_FEQ_Q},
    {Opcode::FCVT_W_S, do_FCVT_W_S},
    {Opcode::FCVT_WU_S, do_FCVT_WU_S},
    {Opcode::FCVT_L_S, do_FCVT_L_S},
    {Opcode::FCVT_LU_S, do_FCVT_LU_S},
    {Opcode::FMV_X_W, do_FMV_X_W},
    {Opcode::FCLASS_S, do_FCLASS_S},
    {Opcode::FCVT_W_D, do_FCVT_W_D},
    {Opcode::FCVT_WU_D, do_FCVT_WU_D},
    {Opcode::FCVT_L_D, do_FCVT_L_D},
    {Opcode::FCVT_LU_D, do_FCVT_LU_D},
    {Opcode::FMV_X_D, do_FMV_X_D},
    {Opcode::FCLASS_D, do_FCLASS_D},
    {Opcode::FCVT_W_Q, do_FCVT_W_Q},
    {Opcode::FCVT_WU_Q, do_FCVT_WU_Q},
    {Opcode::FCVT_L_Q, do_FCVT_L_Q},
    {Opcode::FCVT_LU_Q, do_FCVT_LU_Q},
    {Opcode::FMV_X_Q, do_FMV_X_Q},
    {Opcode::FCLASS_Q, do_FCLASS_Q},
    {Opcode::FCVT_S_W, do_FCVT_S_W},
    {Opcode::FCVT_S_WU, do_FCVT_S_WU},
    {Opcode::FCVT_S_L, do_FCVT_S_L},
    {Opcode::FCVT_S_LU, do_FCVT_S_LU},
    {Opcode::FMV_W_X, do_FMV_W_X},
    {Opcode::FCVT_D_W, do_FCVT_D_W},
    {Opcode::FCVT_D_WU, do_FCVT_D_WU},
    {Opcode::FCVT_D_L, do_FCVT_D_L},
    {Opcode::FCVT_D_LU, do_FCVT_D_LU},
    {Opcode::FMV_D_X, do_FMV_D_X},
    {Opcode::FCVT_Q_W, do_FCVT_Q_W},
    {Opcode::FCVT_Q_WU, do_FCVT_Q_WU},
    {Opcode::FCVT_Q_L, do_FCVT_Q_L},
    {Opcode::FCVT_Q_LU, do_FCVT_Q_LU},
    {Opcode::FMV_Q_X, do_FMV_Q_X},
    {Opcode::FLW, do_FLW},
    {Opcode::FLD, do_FLD},
    {Opcode::FLQ, do_FLQ},
    {Opcode::FSW, do_FSW},
    {Opcode::FSD, do_FSD},
    {Opcode::FSQ, do_FSQ},
    {Opcode::FMADD_S, do_FMADD_S},
    {Opcode::FMSUB_S, do_FMSUB_S},
    {Opcode::FNMSUB_S, do_FNMSUB_S},
    {Opcode::FNMADD_S, do_FNMADD_S},
    {Opcode::FMADD_D, do_FMADD_D},
    {Opcode::FMSUB_D, do_FMSUB_D},
    {Opcode::FNMSUB_D, do_FNMSUB_D},
    {Opcode::FNMADD_D, do_FNMADD_D},
    {Opcode::FMADD_Q, do_FMADD_Q},
    {Opcode::FMSUB_Q, do_FMSUB_Q},
    {Opcode::FNMSUB_Q, do_FNMSUB_Q},
    {Opcode::FNMADD_Q, do_FNMADD_Q}
};