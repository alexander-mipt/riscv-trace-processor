/*
 * This file is autogenerated by 'cmdgen.py' script from .yaml file
 * Do not try to change anything in this file
 * If you need to change code - change script/markdown file
 ***********************************************************
 * Written by Derzhavin Andrey (derzhavin3016) && Khaydari Farid (Tako-San) && Antipov Alexander
 */

#include <iostream>
#include "parse_types.hpp"
#include "cmds.hpp"

void do_BEQ(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 0, 2);
}

void do_BNE(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 0, 2);
}

void do_BLT(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 0, 2);
}

void do_BGE(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 0, 2);
}

void do_BLTU(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 0, 2);
}

void do_BGEU(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 0, 2);
}

void do_JALR(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_JAL(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 1);
    def_routine(ctx, instru);
}

void do_LUI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 1);
    def_routine(ctx, instru);
}

void do_AUIPC(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 1);
    def_routine(ctx, instru);
}

void do_ADDI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SLLI(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SLTI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SLTIU(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_XORI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SRLI(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SRAI(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_ORI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_ANDI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_ADD(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SUB(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SLL(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SLT(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SLTU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_XOR(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SRL(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SRA(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_OR(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AND(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_ADDIW(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SLLIW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SRLIW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SRAIW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_ADDW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SUBW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SLLW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SRLW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_SRAW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_LB(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
   load_routine(ctx, instru);
    def_routine(ctx, instru);
}

void do_LH(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
   load_routine(ctx, instru);
    def_routine(ctx, instru);
}

void do_LW(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
   load_routine(ctx, instru);
    def_routine(ctx, instru);
}

void do_LD(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
   load_routine(ctx, instru);
    def_routine(ctx, instru);
}

void do_LBU(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_LHU(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_LWU(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SB(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
  store_routine(ctx, instru);
}

void do_SH(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
  store_routine(ctx, instru);
}

void do_SW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
  store_routine(ctx, instru);
}

void do_SD(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
  store_routine(ctx, instru);
}

void do_FENCE(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 1);
}

void do_FENCE_I(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 0);
    use_routine(ctx, instru, 0, 1);
}

void do_MUL(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_MULH(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_MULHSU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_MULHU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_DIV(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_DIVU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_REM(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_REMU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_MULW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_DIVW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_DIVUW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_REMW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_REMUW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOADD_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOXOR_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOOR_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOAND_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMIN_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMAX_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMINU_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMAXU_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOSWAP_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_LR_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SC_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOADD_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOXOR_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOOR_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOAND_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMIN_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMAX_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMINU_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOMAXU_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_AMOSWAP_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_LR_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_SC_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_ECALL(Context& ctx, Instr& instru)
{

}

void do_EBREAK(Context& ctx, Instr& instru)
{

}

void do_URET(Context& ctx, Instr& instru)
{

}

void do_SRET(Context& ctx, Instr& instru)
{

}

void do_MRET(Context& ctx, Instr& instru)
{

}

void do_DRET(Context& ctx, Instr& instru)
{

}

void do_SFENCE_VMA(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
}

void do_WFI(Context& ctx, Instr& instru)
{

}

void do_CSRRW(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_CSRRS(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_CSRRC(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_CSRRWI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_CSRRSI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_CSRRCI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_HFENCE_VVMA(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
}

void do_HFENCE_GVMA(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
}

void do_FADD_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSUB_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMUL_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FDIV_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJ_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJN_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJX_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMIN_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMAX_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSQRT_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FADD_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSUB_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMUL_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FDIV_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJ_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJN_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJX_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMIN_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMAX_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FCVT_S_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_D_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FSQRT_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FADD_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSUB_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMUL_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FDIV_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJ_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJN_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FSGNJX_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMIN_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FMAX_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FCVT_S_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_Q_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_D_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_Q_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FSQRT_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FLE_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FLT_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FEQ_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FLE_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FLT_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FEQ_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FLE_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FLT_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FEQ_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 2);
    def_routine(ctx, instru);
}

void do_FCVT_W_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_WU_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_L_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_LU_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FMV_X_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCLASS_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_W_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_WU_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_L_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_LU_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FMV_X_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCLASS_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_W_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_WU_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_L_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_LU_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FMV_X_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCLASS_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_S_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_S_WU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_S_L(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_S_LU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FMV_W_X(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_D_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_D_WU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_D_L(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_D_LU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FMV_D_X(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_Q_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_Q_WU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_Q_L(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FCVT_Q_LU(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FMV_Q_X(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FLW(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FLD(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FLQ(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 2);
    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_FSW(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
}

void do_FSD(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
}

void do_FSQ(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 0, 2);
}

void do_FMADD_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FMSUB_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FNMSUB_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FNMADD_S(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FMADD_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FMSUB_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FNMSUB_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FNMADD_D(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FMADD_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FMSUB_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FNMSUB_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_FNMADD_Q(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 3);
    def_routine(ctx, instru);
}

void do_LI(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 1);
    def_routine(ctx, instru);
}

void do_SEXT_W(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_MV(Context& ctx, Instr& instru)
{

    use_routine(ctx, instru, 1, 1);
    def_routine(ctx, instru);
}

void do_RET(Context& ctx, Instr& instru)
{

}

void do_J(Context& ctx, Instr& instru)
{

    imm_routine(ctx, instru, 0);
}

void do_NOP(Context& ctx, Instr& instru)
{

}

void do_UNDEFINED(Context& ctx, Instr& instru)
{
    err_routine(ctx, instru);
}

